import { Component, OnInit } from '@angular/core';
import { PopoverController, NavController, Platform } from '@ionic/angular';
import { PopoverComponent } from 'src/app/components/popover/popover.component';
import { File } from '@ionic-native/file/ngx';
import * as Excel from 'exceljs';
import { Base64 } from '@ionic-native/base64/ngx';

@Component({
  selector: 'app-project-overview',
  templateUrl: './project-overview.page.html',
  styleUrls: ['./project-overview.page.scss'],
})
export class ProjectOverviewPage implements OnInit {

  private saveDir = 'sitesurvey';
  private blobType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';
  private TEMPLATE_WORKSHEETS = ['Summary', 'PRE PICTURES', 'POST PICTURES', 'CT'];
  private exportFileDir: string;
  private assets: any;
  private k: number;

  constructor(public popoverCtrl: PopoverController,
    public navCtrl: NavController,
    private platform: Platform,
    private base64: Base64,
    private file: File) { }

  ngOnInit() {
  }

  async presentPopover(myEvent) {
    const popover = await this.popoverCtrl.create({
      component: PopoverComponent,
      cssClass: 'my-custom-class',
      event: myEvent,
      translucent: true
    });
    popover.present();
    return popover.onDidDismiss().then(
      (data: any) => {
        try {
          if (data.data.selectedItem === 'save') {
            this.Save();
          } else if (data.data.selectedItem === 'export') {
            this.Export();
          } else if (data.data.selectedItem === 'close') {
            this.Close();
          }
        } catch (error) {
          console.log('outside');
        }
      });
  }

  Save() {
    console.log('parent: Save');
    // code to save the project details
  }

  Export() {
    console.log('parent: Export');
    // code to generate Excel Sheet
    this.generateExcelReport();
  }

  Close() {
    console.log('parent: Close');
  }

  // Export Functions goes below

  private generateExcelReport() {
    this.initExport();
  }

  private initExport() {
    if (this.platform.is('android')) {
      this.file.checkDir(this.file.externalApplicationStorageDirectory, this.saveDir).then(() => {
        console.log('Directory exists !!');
        this.exportFileDir = this.file.externalApplicationStorageDirectory + this.saveDir;
        this.createExcel();
      }).catch((err) => {
        console.log('Directory does not exists !!, creating it ' + err.message);
        this.file.createDir(this.file.externalApplicationStorageDirectory, this.saveDir, false).then(() => {
          console.log('Directory Created Sucessfully !!');
          this.exportFileDir = this.file.externalApplicationStorageDirectory + this.saveDir;
          this.createExcel();
        }).catch((err1) => {
          console.log('Failed to Create Directory !!' + err1.message);
        });
      });
    }
  }

  async createExcel() {
    const wb = new Excel.Workbook();

    // setting workbook property
    wb.creator = 'AutoGenerated';
    wb.lastModifiedBy = 'System';
    wb.created = new Date();
    wb.modified = new Date();
    wb.lastPrinted = new Date();

    // adding required sheets
    const summary_ws = wb.addWorksheet(this.TEMPLATE_WORKSHEETS[0], {
      properties: { tabColor: { argb: 'FF008000' } },
      views: [{ showGridLines: false }]
    });

    summary_ws.properties.defaultColWidth = 10;
    summary_ws.getRow(24).height = 50;
    summary_ws.columns = [
      { width: 20 }, { width: 20 }, { width: 30 }, { width: 20 }, { width: 30 }, { width: 15 }, { width: 15 },
      { width: 15 }, { width: 15 }, { width: 15 }, { width: 15 }, { width: 15 }, { width: 15 }, { width: 15 },
      { width: 15 }, { width: 15 }, { width: 15 },
    ];

    const styleFontRed = { color: { argb: 'FFFF0000' } };
    const styleFontBlack = { color: { argb: 'FFFF0000' } };
    const cellBorder = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
    const cellFillYellow = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFFFF00' }, bgColor: { argb: 'FFFFFF00' } };
    const cellFillSkyBlue = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF87CEEB' }, bgColor: { argb: 'FF87CEEB' } };
    const cellTopBorder = { top: { style: 'thick' } };
    const cellBottomBorder = { bottom: { style: 'thick' } };
    const cellLeftBorder = { left: { style: 'thick' } };
    const cellRightBorder = { right: { style: 'thick' } };

    // rectangle border
    for (let i = 66; i < 73; i++) {
      this.createCell(summary_ws, String.fromCharCode(i) + '2', '', styleFontBlack, cellTopBorder, '');
      this.createCell(summary_ws, String.fromCharCode(i) + '21', '', styleFontBlack, cellBottomBorder, '');
    }

    for (let i = 2; i <= 21; i++) {
      this.createCell(summary_ws, 'B' + i, '', styleFontBlack, cellLeftBorder, '');
      this.createCell(summary_ws, 'H' + i, '', styleFontBlack, cellRightBorder, '');
    }

    // fill again for overlapping cells
    this.createCell(summary_ws, 'B2', '', styleFontBlack, { top: { style: 'thick' }, left: { style: 'thick' } }, '');
    this.createCell(summary_ws, 'H2', '', styleFontBlack, { top: { style: 'thick' }, right: { style: 'thick' } }, '');
    this.createCell(summary_ws, 'B21', '', styleFontBlack, { left: { style: 'thick' }, bottom: { style: 'thick' } }, '');
    this.createCell(summary_ws, 'H21', '', styleFontBlack, { right: { style: 'thick' }, bottom: { style: 'thick' } }, '');

    const projectdata = ['Market:', 'Site ID:', 'Site Name:', 'Contractor:', 'Date:', 'Project:', 'Installation:', 'On Site Tech:',];
    for (let i = 0; i < projectdata.length; i++) {
      this.createCell(summary_ws, 'D' + (i + 6).toString(), projectdata[i], styleFontRed, cellBorder, '');
      this.createCell(summary_ws, 'E' + (i + 6).toString(), '', styleFontBlack, cellBorder, '');
    }

    this.createCell(summary_ws, 'B17', 'Additional Notes:', styleFontBlack, cellBorder, cellFillYellow);
    this.createCell(summary_ws, 'A23', 'Completion Report:', styleFontBlack, cellBorder, cellFillYellow);

    const projectdetail = ['Site:', 'ASP Name', 'FE Name and Number', 'Date completed', 'Shift (Day/Night)', 'Status', 'E911 Complete',
      'SRS complete', 'Used Long CPRI cable? (Yes or No)', '1st Decom DUS Serial', '1st Decom DUS Asset', '1st Decom DUL Serial',
      '1st Decom DUL Asset', 'Decom XMU Serial', 'Decom XMU Asset', 'Installed BB6630 Serial', 'Installed BB6630 Asset'];

    for (let i = 0; i < projectdetail.length; i++) {
      this.createCell(summary_ws, String.fromCharCode(65 + i) + '24', projectdetail[i], styleFontBlack, cellBorder, cellFillSkyBlue);
      this.createCell(summary_ws, String.fromCharCode(65 + i) + '25', '', styleFontBlack, cellBorder, '');
    }

    summary_ws.getRow(24).alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };

    // merge cells
    summary_ws.mergeCells('B18:D18');
    summary_ws.mergeCells('B19:D19');
    summary_ws.mergeCells('B20:D20');

    const pre_ws = wb.addWorksheet(this.TEMPLATE_WORKSHEETS[1], {
      properties: { tabColor: { argb: 'FFFF0000' } },
      views: [{ showGridLines: false }]
    });

    pre_ws.mergeCells('A1:D1');
    const headerFont = { color: { argb: 'FFFF0000' }, 'size': 30, 'bold': true };
    this.createCell(pre_ws, 'A1', 'Pre Pictures', headerFont, cellBorder, cellFillYellow);
    pre_ws.getRow(1).alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };

    const post_ws = wb.addWorksheet(this.TEMPLATE_WORKSHEETS[2], {
      properties: { tabColor: { argb: 'FF0000FF' } },
      views: [{ showGridLines: false }]
    });

    post_ws.mergeCells('A1:D1');
    this.createCell(post_ws, 'A1', 'Post Pictures', headerFont, cellBorder, cellFillYellow);
    post_ws.getRow(1).alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };

    console.log(this.exportFileDir);

    this.file.checkFile(this.exportFileDir + '/', '1.png').then(() => {
      console.log('File 1.png Exists');
    }).catch((err) => {
      console.log('File 1.png does not Exists ' + err.message);
    });

    this.assets = [
      this.file.externalApplicationStorageDirectory + this.saveDir + '/1.png',
      this.file.externalApplicationStorageDirectory + this.saveDir + '/2.png',
      this.file.externalApplicationStorageDirectory + this.saveDir + '/3.png',
      this.file.externalApplicationStorageDirectory + this.saveDir + '/4.png',
      this.file.externalApplicationStorageDirectory + this.saveDir + '/5.png',
      this.file.externalApplicationStorageDirectory + this.saveDir + '/6.png',
      this.file.externalApplicationStorageDirectory + this.saveDir + '/7.png',
      this.file.externalApplicationStorageDirectory + this.saveDir + '/8.png',
      this.file.externalApplicationStorageDirectory + this.saveDir + '/9.png',
      this.file.externalApplicationStorageDirectory + this.saveDir + '/10.png',
      this.file.externalApplicationStorageDirectory + this.saveDir + '/11.png',
      this.file.externalApplicationStorageDirectory + this.saveDir + '/12.png',
    ];

    const max_image_per_row = 5;
    const rows = Math.ceil(this.assets.length / max_image_per_row) * 15;
    const cols = max_image_per_row * 4;
    this.k = 0;
    for (let i = 2; i < rows; i += 14) {
      console.log('Processing Row = ' + i);
      await this.addColumnImage(cols, i, wb, pre_ws);
    }

    console.log('Saving to Excel');

    // save under export.xlsx
    await wb.xlsx.writeBuffer().then(data => {
      const blob = new Blob([data], { type: this.blobType });
      this.file.writeFile(this.exportFileDir, 'export1.xlsx', blob);
    }).catch((err) => {
      console.log('Unable to Create Excel File ' + err.message);
    });
    console.log('Done Create Excel');
  }

  private async addColumnImage(cols: number, i: number, workbook: Excel.Workbook, sheet: Excel.Worksheet) {
    for (let j = 0; j < cols && this.k < this.assets.length; j += 4) {
      console.log('Image No = ' + this.k);
      await this.addImageToExcel(this.assets[this.k], 'png', workbook,
        sheet, {
        tl: { col: j, row: i },
        ext: { width: 250, height: 250 },
        editAs: 'undefined'
      });
      console.log('Image No = ' + this.k + ' added');
      this.k = this.k + 1;
    }
  }

  private async addImageToExcel(imagePath: string, ext: any, workbook: Excel.Workbook, sheet: Excel.Worksheet, location: any) {
    await this.base64.encodeFile(imagePath).then((based64File: string) => {
      const imageId = workbook.addImage({
        base64: based64File,
        extension: ext,
      });
      sheet.addImage(imageId, location);
      console.log('Added Image = ' + imagePath);
    }).catch((err) => {
      console.log('Failed to Add Image to Excel => ' + err.message);
    });
  }

  private createCell(sheet: Excel.Worksheet, cellid: string, cellval: string, font: any, border: any, fill: any) {
    const cell = sheet.getCell(cellid);
    cell.value = cellval;
    cell.border = border;
    cell.style.font = font;
    if (fill !== '') {
      cell.fill = fill;
    }
  }

}
