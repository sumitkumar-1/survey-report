import { Injectable } from '@angular/core';
import { File } from '@ionic-native/file/ngx';
import { Platform } from '@ionic/angular';
import * as Excel from 'exceljs';

@Injectable()
export class ExcelService {
  // Excel Template Details
  private PROJECT_TEMPLATE_NAME = 'XX_COP_TEMPLATE.xlsx';
  private TEMPLATE_WORKSHEETS = ['Summary', 'PRE PICTURES', 'POST PICTURES', 'CT'];
  private sourceDir = 'public/assets/template/';
  private saveDir = 'sitesurvey';
  private exportFileDir: string;
  private exportFileName: string;
  blobType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';

  constructor(private platform: Platform, private file: File) {
    this.init();
  }

  public init() {
    this.platform.ready().then(() => {
      // this.destDir = {
      //   android: this.file.applicationStorageDirectory + 'sitesurvey/',
      //   ios: this.file.documentsDirectory + 'sitesurvey/',
      //   desktop: this.file.dataDirectory + 'sitesurvey/'
      // };
      if (this.platform.is('android')) {
        console.log(this.file.applicationStorageDirectory);
        this.exportFileDir = this.file.applicationStorageDirectory + this.saveDir;
        this.file.checkDir(this.file.applicationStorageDirectory, this.saveDir).then(() => {
          console.log('Directory exists !!');
          this.generateReport();
        }).catch((err) => {
          console.log('Directory does not exists !!, creating it');
          this.file.createDir(this.file.applicationStorageDirectory, this.saveDir, false).then(() => {
            console.log('Directory Created Sucessfully !!');
          }).catch(() => {
            console.log('Failed to Create Directory !!');
          });
        });
      }
    });
  }

  public generateReport() {
    // this.file.createFile(this.exportFileDir, 'test.xlsx', false).then(() => {
    //   console.log('File Created !!');
    // }).catch((err) => {
    //   console.log('File Creation Failed !!');
    // });

    const path = this.file.applicationDirectory + 'public/assets/template/';
    this.file.readAsBinaryString('./assets/template/', this.PROJECT_TEMPLATE_NAME).then((data) => {
      console.log('Success');
      console.log(data);
    }).catch((err) => {
      console.log('Can not read template => { code=' + err.code + ', message=' + err.message + '}');
    });

    this.file.removeFile(this.exportFileDir, this.PROJECT_TEMPLATE_NAME).then(() => {
      console.log('Removed Existing File !!');
    }).catch(() => {
      console.log('Not Files to Remove !!');
    });

    // tslint:disable-next-line: max-line-length
    this.file.copyFile(path, this.PROJECT_TEMPLATE_NAME, this.exportFileDir, this.PROJECT_TEMPLATE_NAME).then(() => {
      console.log('Copy Done !!');
      this.file.moveFile(this.exportFileDir, this.PROJECT_TEMPLATE_NAME, this.exportFileDir, 'testproject.xlsx').then(() => {
        this.exportFileName = this.exportFileDir + '/testproject.xlsx';
        console.log('Rename Finished !!');
        // this.readData();
        this.createExcel();
      }).catch((err) => {
        console.log('Rename Failed !!' + err);
      });
    }).catch((err) => {
      console.log('copy Failed !!');
    });

    // const filename = path + this.PROJECT_TEMPLATE;
    // const wb = XLSX.readFile(filename);
    // const bstr: string = await this.file.readAsBinaryString(path, this.PROJECT_TEMPLATE);
    // console.log('Sumit' + bstr);
    // const wb: XLSX.WorkBook = XLSX.read(bstr, {type: 'binary'});
    // const sheetnames = wb.SheetNames;
    // console.log('Sumit' + sheetnames);
    // alert(sheetnames[0]);
    // alert('final1');
    // alert('final' + sheetnames);
  }

  readData() {
    const workbook = new Excel.Workbook();
    const worksheet = workbook.addWorksheet('My Sheet');

    worksheet.columns = [
      { header: 'Id', key: 'id', width: 10 },
      { header: 'Name', key: 'name', width: 32 },
      { header: 'D.O.B.', key: 'dob', width: 15, }
    ];

    worksheet.addRow({ id: 1, name: 'John Doe', dob: new Date(1970, 1, 1) });
    worksheet.addRow({ id: 2, name: 'Jane Doe', dob: new Date(1965, 1, 7) });

    // save under export.xlsx
    workbook.xlsx.writeBuffer().then(data => {
      const blob = new Blob([data], { type: this.blobType });
      this.file.writeFile(this.exportFileDir, 'export.xlsx', blob);
    });
  }

  createExcel() {
    const wb = new Excel.Workbook();

    // setting workbook property
    wb.creator = 'AutoGenerated';
    wb.lastModifiedBy = 'System';
    wb.created = new Date();
    wb.modified = new Date();
    wb.lastPrinted = new Date();

    // adding required sheets
    const summary_ws = wb.addWorksheet(this.TEMPLATE_WORKSHEETS[0], {
      properties: { tabColor: { argb: 'FFC0000' } },
      views: [{ showGridLines: false }]
    });

    let cell = summary_ws.getCell('D6');
    cell.value = 'Market:';
    cell.style.font = { color: { argb: 'FFFF0000' } };
    cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
    cell = summary_ws.getCell('E6');
    cell.style.font = { color: { argb: 'FFFF0000' } };
    cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };

    cell = summary_ws.getCell('D7');
    cell.value = 'Site ID:';
    cell.style.font = { color: { argb: 'FFFF0000' } };
    cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
    cell = summary_ws.getCell('D8');
    cell.value = 'Site Name:';
    cell.style.font = { color: { argb: 'FFFF0000' } };
    cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
    cell = summary_ws.getCell('D9');
    cell.value = 'Contractor:';
    cell.style.font = { color: { argb: 'FFFF0000' } };
    cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
    cell = summary_ws.getCell('D10');
    cell.value = 'Date:';
    cell.style.font = { color: { argb: 'FFFF0000' } };
    cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
    cell = summary_ws.getCell('D11');
    cell.value = 'Project:';
    cell.style.font = { color: { argb: 'FFFF0000' } };
    cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
    cell = summary_ws.getCell('D13');
    cell.value = 'Installation:';
    cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
    cell = summary_ws.getCell('D15');
    cell.value = 'On Site Tech:';
    cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
    cell = summary_ws.getCell('B17');
    cell.value = 'Additional Notes:';
    cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
    cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF000000' }, bgColor: { argb: 'FFFFFF00' } };

    cell = summary_ws.getCell('A23');
    cell.value = 'Completion Report';
    cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
    cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF000000' }, bgColor: { argb: 'FFFFFF00' } };

    cell = summary_ws.getCell('A24');
    cell.value = 'Site';
    cell = summary_ws.getCell('B24');
    cell.value = 'ASP Name';
    cell = summary_ws.getCell('C24');
    cell.value = 'FE Name and Number';
    cell = summary_ws.getCell('D24');
    cell.value = 'Date completed';
    cell = summary_ws.getCell('E24');
    cell.value = 'Shift (Day/Night)';
    cell = summary_ws.getCell('F24');
    cell.value = 'Status';
    cell = summary_ws.getCell('G24');
    cell.value = 'E911 Complete';
    cell = summary_ws.getCell('H24');
    cell.value = 'SRS complete';
    cell = summary_ws.getCell('I24');
    cell.value = 'Used Long CPRI cable? (Yes or No)';
    cell = summary_ws.getCell('J24');
    cell.value = '1st Decom DUS Serial';
    cell = summary_ws.getCell('K24');
    cell.value = '1st Decom DUS Asset';
    cell = summary_ws.getCell('L24');
    cell.value = '1st Decom DUL Serial';
    cell = summary_ws.getCell('M24');
    cell.value = '1st Decom DUL Asset';
    cell = summary_ws.getCell('N24');
    cell.value = 'Decom XMU Serial';
    cell = summary_ws.getCell('O24');
    cell.value = 'Decom XMU Asset';
    cell = summary_ws.getCell('P24');
    cell.value = 'Installed BB6630 Serial';
    cell = summary_ws.getCell('Q24');
    cell.value = 'Installed BB6630 Asset';

    // merge cells
    summary_ws.mergeCells('B18:D18');
    summary_ws.mergeCells('B19:D19');
    summary_ws.mergeCells('B20:D20');

    const pre_ws = wb.addWorksheet(this.TEMPLATE_WORKSHEETS[1], {
      properties: { tabColor: { argb: 'FFC0000' } },
      views: [{ showGridLines: false }]
    });
    const post_ws = wb.addWorksheet(this.TEMPLATE_WORKSHEETS[2], {
      properties: { tabColor: { argb: 'FFC0000' } },
      views: [{ showGridLines: false }]
    });

    this.file.readAsDataURL(this.exportFileDir, '1.png').then((imgdata) => {
      console.log(imgdata);
      const imageId1 = wb.addImage({
        base64: imgdata,
        extension: 'png',
      });
      pre_ws.addImage(imageId1, {
        tl: { col: 0, row: 0 },
        ext: { width: 250, height: 250 }
      });
    }).catch((err) => {
      console.log('Can not read image data as URL' + err);
    });

    // save under export.xlsx
    wb.xlsx.writeBuffer().then(data => {
      const blob = new Blob([data], { type: this.blobType });
      this.file.writeFile(this.exportFileDir, 'export1.xlsx', blob);
    });
  }
}
